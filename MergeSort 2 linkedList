from sys import stdin, setrecursionlimit
setrecursionlimit(10 ** 6)

#Following is the Node class already written for the Linked List
class Node :
    def __init__(self, data) :
        self.data = data
        self.next = None

def middle(head):
    slow = head
    fast = head.next
    while fast is not None and fast.next is not None:
        slow = slow.next
        fast = fast.next.next
    return slow


def merge(head1,head2):
    if head1 is None and head2 is not  None:
        return head2
    if head2 is None and head1 is not None:
        return head1
    
    dummy = Node(-1)
    tail = dummy
    while head1 is not None and head2 is not None:
        if head1.data < head2.data:
            tail.next = head1
            head1 = head1.next
        else:
            tail.next = head2
            head2 = head2.next 
        tail = tail.next
        
    if head1:
        tail.next = head1
        
    if head2:
        tail.next = head2
    return dummy.next

def mergeSort(head) :
	#Your code goes here
    if head is None or head.next is None:
        return head
    mid = middle(head)
    left = head
    right = mid.next
    mid.next = None
    leftr = mergeSort(left)
    rightr = mergeSort(right)
    result = merge(leftr,rightr)
    return result
    

#Taking Input Using Fast I/O
def takeInput() :
    head = None
    tail = None

    datas = list(map(int, stdin.readline().rstrip().split(" ")))

    i = 0
    while (i < len(datas)) and (datas[i] != -1) :
        data = datas[i]
        newNode = Node(data)

        if head is None :
            head = newNode
            tail = newNode

        else :
            tail.next = newNode
            tail = newNode

        i += 1

    return head


def printLinkedList(head) :

    while head is not None :
        print(head.data, end = " ")
        head = head.next

    print()


#main
t = int(stdin.readline().rstrip())

while t > 0 :
    
    head = takeInput()

    newHead = mergeSort(head)
    printLinkedList(newHead)

    t -= 1
